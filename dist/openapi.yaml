openapi: 3.0.3
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
# local:
- url: "http://127.0.0.1:3000"
# remote:
# - url: "http://132.72.65.211"
  description: SwaggerHub API Auto Mocking hey
tags:
- name: Pages
  description: Pages of the website.
- name: Auth
  description: All authentication related routes.
- name: Users
  description: All User related information.
- name: Recipes
  description: All recipes general info.
paths:
  /:
    get:
      tags:
      - Pages
      summary: Returns the single-page html.
      description: displays the home page.
      responses:
        "200":
          description: page loaded successfully
        "404":
          description: Page was not found.
  /register:
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: user to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
        "409":
          description: an existing user already exists
  /login:
    post:
      tags:
      - Auth
      summary: Login an exist user
      description: An exist user login to the system
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: Authentication failed
  /logout:
    post:
      tags:
        - Auth
      summary: logout a user from the system and delete his cookie
      responses:
        "200":
          description: "the user has ben successfully logged out"
  /users/favorites:
    get:
      tags:
      - Users
      summary: Return the favorite recipes that were saved by user
      description: Get an array of recipes that were saved by a specific user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        "401":
          description: user is not authorized
        "404":
          description: page not found.
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save recipe in the favorites list of a user
      description: save recipe in the favorites list of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: recipe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as favorite.
        "409":
          description: The Recipe is already marked as favorite.
        "401":
          description: user is not authorized.
      security:
      - cookieAuth: []
    delete:
      tags:
      - Users
      summary: remove a recipe from favorites of a user
      description: remove a recipe from favorites of a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: recipe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully Removed as favorite
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /recipes/recipe/search:
    get:
      tags:
      - Recipes
      summary: Search for recipes
      description: Returns a list of recipes matching the search query
      parameters:
      - name: query
        in: query
        description: The search query to match against recipe titles and ingredients
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: cuisine
        in: query
        description: Filter recipes by cuisine
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: diet
        in: query
        description: Filter recipes by diet
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: intolerance
        in: query
        description: Filter recipes by intolerance
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: limit
        in: query
        description: The maximum number of recipes to return
        required: false
        style: form
        explode: true
        schema:
          maximum: 15
          minimum: 1
          type: integer
          default: 5
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        "400":
          description: Bad request
        "500":
          description: Internal server error
  /recipes/recipe/random:
    get:
      tags:
      - Recipes
      summary: returns preview information of random 3 recipes.
      description:  returns array of random 3 recipes.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        "404":
          description: page not found.
        "500":
          description: Internal server error
  /users/lastwatched:
    get:
      tags:
      - Users
      summary: returns last 3 watched recipes
      description:  returns last 3 watched recipes.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        "401":
          description: user is not authorized
        "404":
          description: page not found.
      security:
      - cookieAuth: []
    post:
      tags:
      - Users
      summary: save last watched recipe
      description: save last watched recipe in db
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: recipe's id which the user has watched
                  example: 716429
      responses:
        "200":
          description: The Recipe successfully saved as watched recipe
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
  /users/myrecipes:
    get:
      tags:
      - Users
      summary: page with all the recipes that the user created.
      description: Shows all the recipes that the user has created.
      responses:
        "200":
          description: page loaded successfully
        "401":
          description: not authorized
        "404":
          description: page not found.
      security:
       - cookieAuth: []
  /users/familyrecipes:
    get:
      tags:
      - Users
      summary: page about family recipes
      description: page about family recipes
      responses:
        "200":
          description: page loaded successfully
        "401":
          description: not authorized
        "404":
          description: recpies page not found.
      security:
      - cookieAuth: []
  /users/createrecipe:
    post:
      tags:
      - Users
      summary: Create a new recipe page.
      description: Page for creating and adding a new recipe to the website.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRecipe'
      responses:
        "201":
          description: created new recipe successfully
        "401":
          description: not authorized
        "422":
          description: invalid parameters
      security:
      - cookieAuth: []
  /recipes/{recipeId}:
    get:
      tags:
      - Recipes
      summary: Return preview information about the recipe
      description: Return preview details on recipe by his ID
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: data about the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        "404":
          description: recipeId is not exists
  /recipes/{recipeId}/instructions:
    get:
      tags:
      - Recipes
      summary: Return instrunctions of the recipe
      description: Return array where each element is an instruction.
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: array of strings of instructions.
          content:
            application/json:
              schema:
                type: array
                description: A list of recipe instructions.
                example: ["1.put sauce on first layer", "2.put sauce on second layer."]
                items:
                  type: string
        "404":
          description: recipeId is not exists.
        "500":
          description: Instructions do not exist.
  /recipes/{recipeId}/ingredients:
    get:
      tags:
      - Recipes
      summary: Return Ingredients  of the recipe
      description: Return array where each element is an Ingredient.
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: array of strings of Ingredients.
          content:
            application/json:
              schema:
                type: array
                description: A list of recipe Ingredients.
                example: ["200ml milk","15g butter."]
                items:
                  type: string'
        "404":
          description: recipeId is not exists.
        "500":
          description: Ingredients do not exist.
  /recipes/{recipeId}/servings:
    get:
      tags:
      - Recipes
      summary: Return number of servings  of the recipe
      description:  Return number of servings  of the recipe
      parameters:
      - name: recipeId
        in: path
        description: recipe's id
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: number of servings
          content:
            application/json:
              schema:
                type: object
                description: number of servings.
                example: "4"
        "404":
          description: recipeId is not exists.
  /users/liked:
    post:
      tags:
      - Users
      summary: mark the recipe as liked for the user and INCREMENT recipe's popularity by 1
      description: mark the recipe as liked for the user and INCREMENT recipe's popularity by 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: recipe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe popularity successfully updated.
        "409":
          description: The Recipe is already marked as liked.
        "401":
          description: user is not authorized.
      security:
      - cookieAuth: []
    delete:
      tags:
      - Users
      summary: unmark the recipe as liked for the user and DECREMENT recipe's popularity by 1
      description: unmark the recipe as liked for the user and DECREMENT recipe's popularity by 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: string
                  description: recipe's id which the user saved
                  example: 716429
      responses:
        "200":
          description: The Recipe popularity successfully updated.
        "401":
          description: user is not authorized
      security:
      - cookieAuth: []
components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins between 3 to 8 letters only
          example: my_name
        firstname:
          type: string
          description: user's first name
          example: my_first_name
        lastname:
          type: string
          description: user's last name
          example: my_last_name
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: password conatins between 5 to 10 chars, at least one of them
            is a number and a special char
          format: password
          example: my_name@12
        email:
          pattern: email
          type: string
          description: user's email
          example: my_name12@gmail.com
      description: Model containing user info
    LoginScheme:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username conatins letters only
        password:
          maxLength: 10
          minLength: 5
          description: password conatins at least one number and one special char
          format: password
      example:
        username: my_name
        password: my_name@12
    Recipe:
      required:
      - title
      - readyInMinutes
      - image
      - vegeterian
      - vegan
      type: object
      properties:
        id:
            type: integer
            description: id of the recipe
            example: 716429
        title:
            type: string
            description: name or title of the recipe
            example: Lasanga with meat
        image:
          type: string
          description: URL for recipe picture
          format: URL
        readyInMinutes:
          type: string
          description: Time in minutes of making the recipe.
          example: 45 min / 2 hour and 15 min.
        popularity:
          type: integer
          description: Number of likes.
          example: 11
        vegeterian:
          type: boolean
          description: if the recipe is vegeterian or not.
          example: false
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: false
        gluten free:
          type: boolean
          description: if the recipe is gluten free or not.
          example: false
      description: Model containing recipe information.
    NewRecipe:
      required:
      - title
      - readyInMinutes
      - recipe name
      - image
      - vegeterian
      - vegan
      - instructions
      - ingridients
      - servings
      type: object
      properties:
        title:
            type: string
            description: name or title of the recipe
            example: Lasanga with meat
        image:
          type: string
          description: URL for recipe picture
          format: URL
        readyInMinutes:
          type: integer
          description: Time in minutes of making the recipe.
          example: 120
        vegeterian:
          type: boolean
          description: if the recipe is vegeterian or not.
          example: 0
        vegan:
          type: boolean
          description: indication if the recipe is vegan
          example: 1
        gluten_free:
          type: boolean
          description: if the recipe is gluten free or not.
          example: 0
        servings:
          type: integer
          description: number of servings
          example: 3
        instructions:
          type: array
          description: recipe instructions array
          example: [1.Bake at 300, 2.mix blah blah]
          items:
                type: string
        ingridients:
          type: array
          description: recipe ingridients array
          example: [2tbsp butter, 300ml milk]
          items:
                type: string
      description: Model containing recipe information.

        
  
